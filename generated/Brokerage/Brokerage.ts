// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AssetEntity extends ethereum.Event {
  get params(): AssetEntity__Params {
    return new AssetEntity__Params(this);
  }
}

export class AssetEntity__Params {
  _event: AssetEntity;

  constructor(event: AssetEntity) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[2].value.toString();
  }

  get dataFeedAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get rate(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get liquidationRatio(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class LoanEntity extends ethereum.Event {
  get params(): LoanEntity__Params {
    return new LoanEntity__Params(this);
  }
}

export class LoanEntity__Params {
  _event: LoanEntity;

  constructor(event: LoanEntity) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get collateral(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get asset(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get liability(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get dataFeed(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get rate(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Brokerage__accruedInterestInput_loanStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get collateral(): BigInt {
    return this[2].toBigInt();
  }

  get asset(): Address {
    return this[3].toAddress();
  }

  get liability(): BigInt {
    return this[4].toBigInt();
  }

  get dataFeed(): Address {
    return this[5].toAddress();
  }

  get rate(): BigInt {
    return this[6].toBigInt();
  }

  get time(): BigInt {
    return this[7].toBigInt();
  }
}

export class Brokerage__collateralizationRatioInput_loanStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get collateral(): BigInt {
    return this[2].toBigInt();
  }

  get asset(): Address {
    return this[3].toAddress();
  }

  get liability(): BigInt {
    return this[4].toBigInt();
  }

  get dataFeed(): Address {
    return this[5].toAddress();
  }

  get rate(): BigInt {
    return this[6].toBigInt();
  }

  get time(): BigInt {
    return this[7].toBigInt();
  }
}

export class Brokerage__getLoanResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get collateral(): BigInt {
    return this[2].toBigInt();
  }

  get asset(): Address {
    return this[3].toAddress();
  }

  get liability(): BigInt {
    return this[4].toBigInt();
  }

  get dataFeed(): Address {
    return this[5].toAddress();
  }

  get rate(): BigInt {
    return this[6].toBigInt();
  }

  get time(): BigInt {
    return this[7].toBigInt();
  }
}

export class Brokerage__loanResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: Address;
  value4: BigInt;
  value5: Address;
  value6: BigInt;
  value7: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: Address,
    value4: BigInt,
    value5: Address,
    value6: BigInt,
    value7: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }

  getId(): BigInt {
    return this.value0;
  }

  getOwner(): Address {
    return this.value1;
  }

  getCollateral(): BigInt {
    return this.value2;
  }

  getAsset(): Address {
    return this.value3;
  }

  getLiability(): BigInt {
    return this.value4;
  }

  getDataFeed(): Address {
    return this.value5;
  }

  getRate(): BigInt {
    return this.value6;
  }

  getTime(): BigInt {
    return this.value7;
  }
}

export class Brokerage__withdrawalAmountInput_loanStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get collateral(): BigInt {
    return this[2].toBigInt();
  }

  get asset(): Address {
    return this[3].toAddress();
  }

  get liability(): BigInt {
    return this[4].toBigInt();
  }

  get dataFeed(): Address {
    return this[5].toAddress();
  }

  get rate(): BigInt {
    return this[6].toBigInt();
  }

  get time(): BigInt {
    return this[7].toBigInt();
  }
}

export class Brokerage extends ethereum.SmartContract {
  static bind(address: Address): Brokerage {
    return new Brokerage("Brokerage", address);
  }

  accruedInterest(_loan: Brokerage__accruedInterestInput_loanStruct): BigInt {
    let result = super.call(
      "accruedInterest",
      "accruedInterest((uint256,address,uint256,address,uint256,address,uint256,uint256)):(uint256)",
      [ethereum.Value.fromTuple(_loan)],
    );

    return result[0].toBigInt();
  }

  try_accruedInterest(
    _loan: Brokerage__accruedInterestInput_loanStruct,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "accruedInterest",
      "accruedInterest((uint256,address,uint256,address,uint256,address,uint256,uint256)):(uint256)",
      [ethereum.Value.fromTuple(_loan)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approveAsset(
    assetDataFeedAddress: Address,
    name: string,
    symbol: string,
    rate: BigInt,
    liquidationRatio: BigInt,
  ): Address {
    let result = super.call(
      "approveAsset",
      "approveAsset(address,string,string,uint32,uint32):(address)",
      [
        ethereum.Value.fromAddress(assetDataFeedAddress),
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromUnsignedBigInt(rate),
        ethereum.Value.fromUnsignedBigInt(liquidationRatio),
      ],
    );

    return result[0].toAddress();
  }

  try_approveAsset(
    assetDataFeedAddress: Address,
    name: string,
    symbol: string,
    rate: BigInt,
    liquidationRatio: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "approveAsset",
      "approveAsset(address,string,string,uint32,uint32):(address)",
      [
        ethereum.Value.fromAddress(assetDataFeedAddress),
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromUnsignedBigInt(rate),
        ethereum.Value.fromUnsignedBigInt(liquidationRatio),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  assetToUsd(amount: BigInt, dataFeed: Address): BigInt {
    let result = super.call(
      "assetToUsd",
      "assetToUsd(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(dataFeed),
      ],
    );

    return result[0].toBigInt();
  }

  try_assetToUsd(
    amount: BigInt,
    dataFeed: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "assetToUsd",
      "assetToUsd(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(dataFeed),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  assets(param0: Address): Address {
    let result = super.call("assets", "assets(address):(address)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toAddress();
  }

  try_assets(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("assets", "assets(address):(address)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  collateralizationRatio(
    _loan: Brokerage__collateralizationRatioInput_loanStruct,
  ): BigInt {
    let result = super.call(
      "collateralizationRatio",
      "collateralizationRatio((uint256,address,uint256,address,uint256,address,uint256,uint256)):(uint256)",
      [ethereum.Value.fromTuple(_loan)],
    );

    return result[0].toBigInt();
  }

  try_collateralizationRatio(
    _loan: Brokerage__collateralizationRatioInput_loanStruct,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collateralizationRatio",
      "collateralizationRatio((uint256,address,uint256,address,uint256,address,uint256,uint256)):(uint256)",
      [ethereum.Value.fromTuple(_loan)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dataFeedPrice(dataFeed: Address): BigInt {
    let result = super.call(
      "dataFeedPrice",
      "dataFeedPrice(address):(uint256)",
      [ethereum.Value.fromAddress(dataFeed)],
    );

    return result[0].toBigInt();
  }

  try_dataFeedPrice(dataFeed: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "dataFeedPrice",
      "dataFeedPrice(address):(uint256)",
      [ethereum.Value.fromAddress(dataFeed)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getChainlinkDataFeedLatestAnswer(dataFeed: Address): BigInt {
    let result = super.call(
      "getChainlinkDataFeedLatestAnswer",
      "getChainlinkDataFeedLatestAnswer(address):(int256)",
      [ethereum.Value.fromAddress(dataFeed)],
    );

    return result[0].toBigInt();
  }

  try_getChainlinkDataFeedLatestAnswer(
    dataFeed: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getChainlinkDataFeedLatestAnswer",
      "getChainlinkDataFeedLatestAnswer(address):(int256)",
      [ethereum.Value.fromAddress(dataFeed)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLoan(_uid: BigInt): Brokerage__getLoanResultValue0Struct {
    let result = super.call(
      "getLoan",
      "getLoan(uint256):((uint256,address,uint256,address,uint256,address,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_uid)],
    );

    return changetype<Brokerage__getLoanResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getLoan(
    _uid: BigInt,
  ): ethereum.CallResult<Brokerage__getLoanResultValue0Struct> {
    let result = super.tryCall(
      "getLoan",
      "getLoan(uint256):((uint256,address,uint256,address,uint256,address,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_uid)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Brokerage__getLoanResultValue0Struct>(value[0].toTuple()),
    );
  }

  loan(param0: BigInt): Brokerage__loanResult {
    let result = super.call(
      "loan",
      "loan(uint256):(uint256,address,uint256,address,uint256,address,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new Brokerage__loanResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toAddress(),
      result[6].toBigInt(),
      result[7].toBigInt(),
    );
  }

  try_loan(param0: BigInt): ethereum.CallResult<Brokerage__loanResult> {
    let result = super.tryCall(
      "loan",
      "loan(uint256):(uint256,address,uint256,address,uint256,address,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Brokerage__loanResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toAddress(),
        value[6].toBigInt(),
        value[7].toBigInt(),
      ),
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  params(param0: Bytes): BigInt {
    let result = super.call("params", "params(bytes32):(uint32)", [
      ethereum.Value.fromFixedBytes(param0),
    ]);

    return result[0].toBigInt();
  }

  try_params(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall("params", "params(bytes32):(uint32)", [
      ethereum.Value.fromFixedBytes(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  usdToAsset(amount: BigInt, dataFeed: Address): BigInt {
    let result = super.call(
      "usdToAsset",
      "usdToAsset(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(dataFeed),
      ],
    );

    return result[0].toBigInt();
  }

  try_usdToAsset(
    amount: BigInt,
    dataFeed: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "usdToAsset",
      "usdToAsset(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(dataFeed),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawalAmount(_loan: Brokerage__withdrawalAmountInput_loanStruct): BigInt {
    let result = super.call(
      "withdrawalAmount",
      "withdrawalAmount((uint256,address,uint256,address,uint256,address,uint256,uint256)):(uint256)",
      [ethereum.Value.fromTuple(_loan)],
    );

    return result[0].toBigInt();
  }

  try_withdrawalAmount(
    _loan: Brokerage__withdrawalAmountInput_loanStruct,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawalAmount",
      "withdrawalAmount((uint256,address,uint256,address,uint256,address,uint256,uint256)):(uint256)",
      [ethereum.Value.fromTuple(_loan)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _precision(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get borrowingRatio(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get daoFee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get liquidatorFee(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get collectorFee(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _etherDataFeedAddress(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveAssetCall extends ethereum.Call {
  get inputs(): ApproveAssetCall__Inputs {
    return new ApproveAssetCall__Inputs(this);
  }

  get outputs(): ApproveAssetCall__Outputs {
    return new ApproveAssetCall__Outputs(this);
  }
}

export class ApproveAssetCall__Inputs {
  _call: ApproveAssetCall;

  constructor(call: ApproveAssetCall) {
    this._call = call;
  }

  get assetDataFeedAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[2].value.toString();
  }

  get rate(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get liquidationRatio(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ApproveAssetCall__Outputs {
  _call: ApproveAssetCall;

  constructor(call: ApproveAssetCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CollectCall extends ethereum.Call {
  get inputs(): CollectCall__Inputs {
    return new CollectCall__Inputs(this);
  }

  get outputs(): CollectCall__Outputs {
    return new CollectCall__Outputs(this);
  }
}

export class CollectCall__Inputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get _loanId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CollectCall__Outputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _loanId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class IssueCall extends ethereum.Call {
  get inputs(): IssueCall__Inputs {
    return new IssueCall__Inputs(this);
  }

  get outputs(): IssueCall__Outputs {
    return new IssueCall__Outputs(this);
  }
}

export class IssueCall__Inputs {
  _call: IssueCall;

  constructor(call: IssueCall) {
    this._call = call;
  }

  get assetAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class IssueCall__Outputs {
  _call: IssueCall;

  constructor(call: IssueCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class LiquidateCall extends ethereum.Call {
  get inputs(): LiquidateCall__Inputs {
    return new LiquidateCall__Inputs(this);
  }

  get outputs(): LiquidateCall__Outputs {
    return new LiquidateCall__Outputs(this);
  }
}

export class LiquidateCall__Inputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get _loanId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get payment(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LiquidateCall__Outputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }
}

export class ParamSetterCall extends ethereum.Call {
  get inputs(): ParamSetterCall__Inputs {
    return new ParamSetterCall__Inputs(this);
  }

  get outputs(): ParamSetterCall__Outputs {
    return new ParamSetterCall__Outputs(this);
  }
}

export class ParamSetterCall__Inputs {
  _call: ParamSetterCall;

  constructor(call: ParamSetterCall) {
    this._call = call;
  }

  get param(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ParamSetterCall__Outputs {
  _call: ParamSetterCall;

  constructor(call: ParamSetterCall) {
    this._call = call;
  }
}

export class PaybackCall extends ethereum.Call {
  get inputs(): PaybackCall__Inputs {
    return new PaybackCall__Inputs(this);
  }

  get outputs(): PaybackCall__Outputs {
    return new PaybackCall__Outputs(this);
  }
}

export class PaybackCall__Inputs {
  _call: PaybackCall;

  constructor(call: PaybackCall) {
    this._call = call;
  }

  get _loanId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get payment(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class PaybackCall__Outputs {
  _call: PaybackCall;

  constructor(call: PaybackCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetEtherDataFeedCall extends ethereum.Call {
  get inputs(): SetEtherDataFeedCall__Inputs {
    return new SetEtherDataFeedCall__Inputs(this);
  }

  get outputs(): SetEtherDataFeedCall__Outputs {
    return new SetEtherDataFeedCall__Outputs(this);
  }
}

export class SetEtherDataFeedCall__Inputs {
  _call: SetEtherDataFeedCall;

  constructor(call: SetEtherDataFeedCall) {
    this._call = call;
  }

  get _etherDataFeedAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetEtherDataFeedCall__Outputs {
  _call: SetEtherDataFeedCall;

  constructor(call: SetEtherDataFeedCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _loanId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
